//@version=5
indicator('Advanced Trend Signal with SSL Baseline + Enhanced Precision for Buy/Sell', overlay=true)

// --------------------------
// ورودی‌ها
// --------------------------

// Moving Average Inputs
maType = input.string(title='Baseline Type', defval='HMA', options=['SMA', 'EMA', 'HMA', 'WMA', 'DEMA', 'TEMA', 'LSMA', 'TMA', 'Kijun', 'McGinley'])
maLength = input.int(title='Baseline Length', defval=55, minval=1)

// ADX Inputs
adxLength = input.int(title="ADX Length", defval=14, minval=1)
adxThreshold = input.float(title="ADX Threshold", defval=20.0, minval=0.0)

// Volume Filter
includeVolumeFilter = input.bool(title="Include Volume Filter", defval=true)

// Higher Timeframe Filter
useHigherTFFilter = input.bool(title="Use Higher Timeframe Filter", defval=true)
higherTF = input.timeframe(title="Higher Timeframe", defval="60")

// Candle Patterns Filter
includeCandlePatterns = input.bool(title="Include Candle Patterns", defval=true)

// --------------------------
// تابع محاسبه میانگین متحرک
// --------------------------
ma(type, src, len) =>
    float result = na
    if type == 'SMA'
        result := ta.sma(src, len)
    else if type == 'EMA'
        result := ta.ema(src, len)
    else if type == 'HMA'
        len2 = math.round(len / 2)
        sqrtLen = math.round(math.sqrt(len))
        wma1 = ta.wma(src, len2)
        wma2 = ta.wma(src, len)
        result := ta.wma(2 * wma1 - wma2, sqrtLen)
    else if type == 'WMA'
        result := ta.wma(src, len)
    else if type == 'DEMA'
        ema1 = ta.ema(src, len)
        ema2 = ta.ema(ema1, len)
        result := 2 * ema1 - ema2
    else if type == 'TEMA'
        ema1 = ta.ema(src, len)
        ema2 = ta.ema(ema1, len)
        ema3 = ta.ema(ema2, len)
        result := 3 * (ema1 - ema2) + ema3
    else if type == 'LSMA'
        result := ta.linreg(src, len, 0)
    else if type == 'TMA'
        sma1 = ta.sma(src, len)
        result := ta.sma(sma1, len)
    else if type == 'Kijun'
        result := (ta.highest(high, len) + ta.lowest(low, len)) / 2
    else if type == 'McGinley'
        mg = 0.0
        mg := na(mg[1]) ? src : mg[1] + (src - mg[1]) / (len * math.pow(src / mg[1], 4))
        result := mg
    result

// --------------------------
// محاسبه Baseline و Signal Line
// --------------------------
baseline = ma(maType, close, maLength)
emaHigh = ma(maType, high, maLength)
emaLow = ma(maType, low, maLength)

var int hlv = 0
hlv := close > emaHigh ? 1 : close < emaLow ? -1 : hlv[1]
signalLine = hlv < 0 ? emaHigh : emaLow

// تولید سیگنال‌های خرید و فروش
buySignal = ta.crossover(close, signalLine)
sellSignal = ta.crossunder(close, signalLine)

// --------------------------
// محاسبه فیلترهای اضافی
// --------------------------

// محاسبه RSI
rsi = ta.rsi(close, 14)

// محاسبه MACD
macdLine = ta.ema(close, 12) - ta.ema(close, 26)
signalLineMACD = ta.ema(macdLine, 9)
macdBuy = macdLine > signalLineMACD
macdSell = macdLine < signalLineMACD

// استفاده از تابع بومی برای محاسبه ADX
[diPlus, diMinus, adx] = ta.dmi(adxLength, adxLength)

// محاسبه میانگین حجم
volumeMA = ta.sma(volume, 20)

// --------------------------
// محاسبه تایم‌فریم بالاتر
// --------------------------
higherBaseline = request.security(syminfo.tickerid, higherTF, ma(maType, close, maLength), lookahead=barmerge.lookahead_off)
higherEMAHigh = request.security(syminfo.tickerid, higherTF, ma(maType, high, maLength))
higherEMALow = request.security(syminfo.tickerid, higherTF, ma(maType, low, maLength))

var int higherHlv = 0
higherHlv := close > higherEMAHigh ? 1 : close < higherEMALow ? -1 : higherHlv[1]
higherSignalLine = higherHlv < 0 ? higherEMAHigh : higherEMALow

// --------------------------
// تنظیمات اختیاری برای فیلترها
// --------------------------

// اصلاح شرایط خرید و فروش با فیلترهای اضافی (بدون فیلتر حجم)
buyCondition = buySignal and rsi < 70 and macdBuy and adx > adxThreshold
sellCondition = sellSignal and rsi > 30 and macdSell and adx > adxThreshold

if useHigherTFFilter
    buyCondition := buyCondition and close > higherBaseline and close > higherSignalLine
    sellCondition := sellCondition and close < higherBaseline and close < higherSignalLine


// --------------------------
// محاسبه الگوهای کندل‌استیک
// --------------------------
var string candlePatternBuy = ""
var string candlePatternSell = ""

if includeCandlePatterns
    // الگوی بلشی انجلفینگ
    bullishEngulfing = open < close[1] and close > open[1] and close > open
    // الگوی برشی انجلفینگ
    bearishEngulfing = open > close[1] and close < open[1] and close < open
    // الگوی دوجی
    doji = math.abs(close - open) <= (ta.tr(true) * 0.1)
    // الگوی چکش
    hammer = (close > open and (high - low) > 3 * (open - close)) and ((close - low) / (0.001 + high - low)) > 0.6
    // الگوی ستاره سقوطی
    shootingStar = (open > close and (high - low) > 3 * (open - close)) and ((high - close) / (0.001 + high - low)) > 0.6
    // الگوی نیشگون
    // Piercing Line
    piercingLine = ta.crossover(close, open[1]) and close > (open[1] + close[1]) / 2 and close > open

// Dark Cloud Cover
    darkCloudCover = ta.crossunder(close, open[1]) and close < (open[1] + close[1]) / 2 and close < open


    // بررسی الگوهای کندل‌استیک برای خرید
    if bullishEngulfing
        candlePatternBuy := "Bullish Engulfing"
    if doji
        candlePatternBuy := na(candlePatternBuy) ? "Doji" : candlePatternBuy + ", Doji"
    if hammer
        candlePatternBuy := na(candlePatternBuy) ? "Hammer" : candlePatternBuy + ", Hammer"
    if piercingLine
        candlePatternBuy := na(candlePatternBuy) ? "Piercing Line" : candlePatternBuy + ", Piercing Line"

    // بررسی الگوهای کندل‌استیک برای فروش
    if bearishEngulfing
        candlePatternSell := "Bearish Engulfing"
    if doji
        candlePatternSell := na(candlePatternSell) ? "Doji" : candlePatternSell + ", Doji"
    if shootingStar
        candlePatternSell := na(candlePatternSell) ? "Shooting Star" : candlePatternSell + ", Shooting Star"
    if darkCloudCover
        candlePatternSell := na(candlePatternSell) ? "Dark Cloud Cover" : candlePatternSell + ", Dark Cloud Cover"

// --------------------------
// بخش دوم: Precise Professional Price Action Zones v4
// --------------------------

// ورودی‌های محدوده‌های قیمت
zoneThickness = input.int(2, title="ضخامت محدوده (پیکسل)", minval=1, maxval=10)
lookbackPeriod = input.int(100, title="دوره بازنگری برای نقاط پیوت", minval=20, maxval=1000)
zoneWidthATRMultiplier = input.float(0.2, title="ضریب ATR برای پهنای محدوده", minval=0.1, step=0.1)
maxZones = input.int(5, title="حداکثر تعداد محدوده‌ها", minval=1, maxval=10)
pivotLeft = input.int(5, title="تعداد میله‌های سمت چپ برای پیوت", minval=1, maxval=10)
pivotRight = input.int(5, title="تعداد میله‌های سمت راست برای پیوت", minval=1, maxval=10)

// محاسبه ATR برای پهنای دینامیک محدوده
atr = ta.atr(14)

// شناسایی نقاط پیوت بالا و پایین
isPivotHigh = ta.pivothigh(high, pivotLeft, pivotRight)
isPivotLow = ta.pivotlow(low, pivotLeft, pivotRight)

// تعریف آرایه‌ها برای ذخیره سطوح مقاومت و حمایت
var float[] resistanceLevels = array.new_float()
var float[] supportLevels = array.new_float()

// تعریف آرایه‌ها برای ذخیره شناسه‌های مستطیل‌ها
var box[] resistanceBoxes = array.new_box()
var box[] supportBoxes = array.new_box()

// افزودن سطح مقاومت جدید
if not na(isPivotHigh)
    // بررسی اینکه آیا سطح مشابهی وجود دارد یا خیر
    levelExists = false
    if array.size(resistanceLevels) > 0
        for i = 0 to array.size(resistanceLevels) - 1
            existingLevel = array.get(resistanceLevels, i)
            if math.abs(existingLevel - isPivotHigh) < (atr * 0.5)
                levelExists := true
                break
    if not levelExists
        // افزودن سطح مقاومت به آرایه
        array.push(resistanceLevels, isPivotHigh)
        // تعریف حدود محدوده: مستطیل از سطح پیوت بالا به بالا رسم شود
        top = isPivotHigh + (zoneWidthATRMultiplier * atr)
        bottom = isPivotHigh
        // اطمینان از اینکه left منفی نیست
        leftIndex = bar_index - lookbackPeriod >= 0 ? bar_index - lookbackPeriod : 0
        // ایجاد مستطیل برای محدوده مقاومت
        resBox = box.new(left=leftIndex, 
                         top=top, 
                         bottom=bottom, 
                         right=bar_index, 
                         border_color=color.red, 
                         bgcolor=color.new(color.red, 80), 
                         extend=extend.right, 
                         border_width=zoneThickness)
        // افزودن مستطیل به آرایه
        array.push(resistanceBoxes, resBox)
        // محدود کردن تعداد سطوح مقاومت
        if array.size(resistanceLevels) > maxZones
            array.shift(resistanceLevels)
            oldBox = array.shift(resistanceBoxes)
            box.delete(oldBox)

// افزودن سطح حمایت جدید
if not na(isPivotLow)
    // بررسی اینکه آیا سطح مشابهی وجود دارد یا خیر
    levelExists = false
    if array.size(supportLevels) > 0
        for i = 0 to array.size(supportLevels) - 1
            existingLevel = array.get(supportLevels, i)
            if math.abs(existingLevel - isPivotLow) < (atr * 0.5)
                levelExists := true
                break
    if not levelExists
        // افزودن سطح حمایت به آرایه
        array.push(supportLevels, isPivotLow)
        // تعریف حدود محدوده: مستطیل از سطح پیوت پایین به پایین رسم شود
        top = isPivotLow
        bottom = isPivotLow - (zoneWidthATRMultiplier * atr)
        // اطمینان از اینکه left منفی نیست
        leftIndex = bar_index - lookbackPeriod >= 0 ? bar_index - lookbackPeriod : 0
        // ایجاد مستطیل برای محدوده حمایت
        supBox = box.new(left=leftIndex, 
                         top=top, 
                         bottom=bottom, 
                         right=bar_index, 
                         border_color=color.green, 
                         bgcolor=color.new(color.green, 80), 
                         extend=extend.right, 
                         border_width=zoneThickness)
        // افزودن مستطیل به آرایه
        array.push(supportBoxes, supBox)
        // محدود کردن تعداد سطوح حمایت
        if array.size(supportLevels) > maxZones
            array.shift(supportLevels)
            oldBox = array.shift(supportBoxes)
            box.delete(oldBox)

// تعیین بیشینه مقاومت و کمینه حمایت
float maxResistance = na
if array.size(resistanceLevels) > 0
    max_res = array.get(resistanceLevels, 0)
    if array.size(resistanceLevels) > 1
        for i = 1 to array.size(resistanceLevels) - 1
            level = array.get(resistanceLevels, i)
            max_res := math.max(max_res, level)
    maxResistance := max_res

float minSupport = na
if array.size(supportLevels) > 0
    min_sup = array.get(supportLevels, 0)
    if array.size(supportLevels) > 1
        for i = 1 to array.size(supportLevels) - 1
            level = array.get(supportLevels, i)
            min_sup := math.min(min_sup, level)
    minSupport := min_sup

// رنگ‌بندی پس‌زمینه بر اساس قیمت بسته شدن
bg_above_resistance = not na(maxResistance) and close > maxResistance
bg_below_support = not na(minSupport) and close < minSupport

bgcolor(bg_above_resistance ? color.new(color.red, 90) : na, title="بر بالای محدوده مقاومت")
bgcolor(bg_below_support ? color.new(color.green, 90) : na, title="بر پایین محدوده حمایت")

// --------------------------
// تایید فیلتر حجم (بدون تأثیر بر سیگنال‌ها)
// --------------------------
volumeConfirmation = includeVolumeFilter and volume > volumeMA

// --------------------------
// ترسیم شاخص‌ها و سیگنال‌ها
// --------------------------

// ترسیم Baseline
plot(baseline, color=color.orange, linewidth=2, title='MA Baseline')

// ترسیم Signal Line با رنگ‌های متغیر
signalLineColor = hlv < 0 ? color.blue : color.red
plot(signalLine, color=signalLineColor, linewidth=2, title='Signal Line')

// ----- اضافه کردن SSL Baseline جدید -----

// ورودی‌های SSL Baseline
sslType = input.string(title='SSL Baseline Type', defval='EMA', options=['SMA', 'EMA', 'HMA', 'WMA', 'DEMA', 'TEMA', 'LSMA', 'TMA', 'Kijun', 'McGinley'])
sslLength = input.int(title='SSL Baseline Length', defval=55, minval=1)

// محاسبه SSL High و SSL Low
sslHigh = ma(sslType, high, sslLength)
sslLow = ma(sslType, low, sslLength)

// تعریف وضعیت SSL Baseline
var int hlv_SSL = 0
hlv_SSL := close > sslHigh ? 1 : close < sslLow ? -1 : hlv_SSL[1]

// محاسبه خط سیگنال SSL Baseline
sslSignalLine = hlv_SSL < 0 ? sslHigh : sslLow

// ترسیم SSL Baseline روی نمودار
plot(sslSignalLine, color=color.new(color.blue, 0), linewidth=2, title='SSL Baseline')


// --------------------------
// ترسیم سیگنال‌های خرید و فروش با برچسب‌ها
// --------------------------

// ترسیم سیگنال‌های خرید
plotshape(buyCondition, title='Buy Signal', text='BUY', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.white, size=size.normal)

// ترسیم سیگنال‌های فروش
plotshape(sellCondition, title='Sell Signal', text='SELL', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.white, size=size.normal)

// ترسیم تایید حجم به عنوان یک شکل جداگانه
plotshape(volumeConfirmation, title='Volume Confirmation', text='VOL', style=shape.circle, location=location.top, color=color.new(color.blue, 0), size=size.tiny)

// --------------------------
// افزودن الگوهای کندل‌استیک برای تایید سیگنال‌ها
// --------------------------

if includeCandlePatterns
    // نمایش الگوهای خرید
    if buyCondition and candlePatternBuy != ""
        label.new(bar_index, low, text=candlePatternBuy, style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)
    // نمایش الگوهای فروش
    if sellCondition and candlePatternSell != ""
        label.new(bar_index, high, text=candlePatternSell, style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

// نمایش ADX آخرین کندل با استفاده از برچسب
label.new(bar_index, high, text="ADX: " + str.tostring(adx), style=label.style_label_down, color=color.purple, textcolor=color.white, size=size.small)
